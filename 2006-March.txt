From tiax at berlios.de  Mon Mar  6 13:15:25 2006
From: tiax at berlios.de (tiax at BerliOS)
Date: Mon, 6 Mar 2006 13:15:25 +0100
Subject: [Pwnbot-commits] r51 - branches/recodemitclasses
Message-ID: <200603061215.k26CFPW2032468@sheep.berlios.de>

Author: tiax
Date: 2006-03-06 13:15:24 +0100 (Mon, 06 Mar 2006)
New Revision: 51

Modified:
   branches/recodemitclasses/ircbot.py
Log:
repr

Modified: branches/recodemitclasses/ircbot.py
===================================================================
--- branches/recodemitclasses/ircbot.py	2006-02-23 00:44:14 UTC (rev 50)
+++ branches/recodemitclasses/ircbot.py	2006-03-06 12:15:24 UTC (rev 51)
@@ -24,16 +24,20 @@
     '''Etwas im IRC ist passiert'''
     __slots__ = ['quelle','ziel','event','inhalt','parent']
     quelle = {}
-    
+
     def __init__(self,zeile,parent):
         self.parent = parent
         self._teile(zeile)
+        print self
 
+    def __repr__(self):
+        return "\n".join(("Quelle:" + str(self.quelle), "Ziel: " + self.ziel, "Event: " + self.event, " ".join(self.inhalt)))
+
     def _teile(self,zeile):
         '''teilt die Zeile in Attribute f?r die Klase auf'''
         zeile = zeile.split()
         quelle = zeile.pop(0).split('!')
-        self.quelle['nick'] = quelle[0]
+        self.quelle['nick'] = quelle[0].lstrip(':')
         try:
             self.quelle['ident'] = quelle[1]
         except IndexError:
@@ -43,11 +47,12 @@
             self.quelle['host'] = quelle[1].split('@')[1]
         self.event = zeile.pop(0)
         self.ziel = zeile.pop(0)
-        self.inhalt = zeile 
-        
+        zeile[0] = zeile[0].lstrip(':')
+        self.inhalt = zeile
+
     def Log(self):
         '''schreibt das event ins logfile'''
-        logging.log(quelle=self.quelle['gesamthost'],event=self.event,ziel=self.ziel,inhalt=self.inhalt)
+        pass
 
     def Checkforcommand(self):
         '''?berpr?ft die den Inhalt auf einen Befehl und gibt den zur?ck bei Erfolg, ansonsten nichts'''
@@ -57,4 +62,4 @@
             argumente = self.inhalt
             return {'befehl':befehl,'argumente':argumente}
         else:
-            return None
+            return False
\ No newline at end of file



From tiax at berlios.de  Sat Mar 11 20:31:53 2006
From: tiax at berlios.de (tiax at BerliOS)
Date: Sat, 11 Mar 2006 20:31:53 +0100
Subject: [Pwnbot-commits] r52 - branches/recodemitclasses
Message-ID: <200603111931.k2BJVrOn018672@sheep.berlios.de>

Author: tiax
Date: 2006-03-11 20:31:51 +0100 (Sat, 11 Mar 2006)
New Revision: 52

Added:
   branches/recodemitclasses/befehle.py
   branches/recodemitclasses/events.py
Modified:
   branches/recodemitclasses/ircbot.py
   branches/recodemitclasses/xwars.py
Log:
ircbot voran

Added: branches/recodemitclasses/befehle.py
===================================================================
--- branches/recodemitclasses/befehle.py	2006-03-06 12:15:24 UTC (rev 51)
+++ branches/recodemitclasses/befehle.py	2006-03-11 19:31:51 UTC (rev 52)
@@ -0,0 +1,53 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import xwars
+import logging
+
+logger = logging.getLogger('plugins')
+
+def _checkfortiax(event):
+    return event.quelle['ident'] == 'tiax' and event.quelle['host'] == 'victory-is-life.de'
+def quit(event):
+    if _checkfortiax(event):
+        event.parent.quit('Shutdown: %s' % ' '.join(event.befehl['argumente']))
+    else:
+        event.parent.notice(event.quelle['nick'],'Nicht berechtigt')
+
+def ping(event):
+    event.parent.notice(event.quelle['nick'],'Pong')
+
+def join(event):
+    if _checkfortiax(event):
+        event.parent.join(' '.join(event.befehl['argumente']))
+
+def part(event):
+    if _checkfortiax(event):
+        event.parent.part(' '.joing(event.befehl['argumente']))
+
+def say(event):
+    if _checkfortiax(event):
+        event.parent.msg(event.befehl['argumente'].pop(0),' '.join(event.befehl['argumente']))
+
+def parse(event):
+    print event.ziel
+    if event.ziel == '#tdm':
+        try:
+            url = event.befehl['argumente'][0]
+        except IndexError:
+            event.parent.notice(event.quelle['nick'],'Bitte URL angeben')
+        else:
+            logger.info('%s l?sst %s parsen' % (event.quelle, url))
+            kampfbericht = xwars.kampfbericht(url)
+            try:
+                kampfbericht.analyze()
+            except (IOError), meldung:
+                self.notice(event.quelle['nick'],meldung)
+            except AttributeError:
+                self.notice(event.quelle['nick'],'Ung?ltige URL')
+            else:
+                kampfbericht.manipulate()
+                kampfbericht.save()
+                event.parent.notice(event.quelle['nick'],'URL: ' + kampfbericht.dateiname)
+
+def unbekannt(event):
+    event.parent.notice(event.quelle['nick'],'Befehl nicht gefunden')

Added: branches/recodemitclasses/events.py
===================================================================
--- branches/recodemitclasses/events.py	2006-03-06 12:15:24 UTC (rev 51)
+++ branches/recodemitclasses/events.py	2006-03-11 19:31:51 UTC (rev 52)
@@ -0,0 +1,33 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import logging
+import befehle
+logger = logging.getLogger()
+
+# Events f?r den pwnbot
+def unbekannt(event):
+    event.Log()
+    pass
+
+def num_001(event):
+    '''Verbindung hergestellt'''
+    logger.debug('Verbindung erfolgreich etabliert')
+    event.parent.join('#tiax')
+
+def num_005(event):
+    '''Was der server unterst?tzt'''
+
+def PRIVMSG(event):
+    '''eine Nachricht'''
+    event.Log()
+    event.Checkforcommand()
+    if hasattr(event,'befehl'):
+        befehl = getattr(befehle,event.befehl['befehl'],befehle.unbekannt)
+        befehl(event)
+
+def raw_443(event):
+    try:
+        event.parent.currentnickname = event.parent.nicknames.pop(0)
+    except IndexError:
+        logger.critical('Nicknames sind ausgegangen')
+        sys.exit('Nicknames ausgegangen')
\ No newline at end of file

Modified: branches/recodemitclasses/ircbot.py
===================================================================
--- branches/recodemitclasses/ircbot.py	2006-03-06 12:15:24 UTC (rev 51)
+++ branches/recodemitclasses/ircbot.py	2006-03-11 19:31:51 UTC (rev 52)
@@ -14,21 +14,36 @@
 # # ### ### ### ### ### ### ### ### ### ### ### #
 
 # was an modulen gebraucht wird.
-import socket # f?r die IRC-Verbindung
+import socket
 import sys
 import time
 import os
 import xwars
+import logging
+import events
+from logging.handlers import RotatingFileHandler
 
+logger = None
+
+def logstart(size):
+    global logger
+    logger = logging.getLogger()
+    handler = RotatingFileHandler('ircbot.log','a',size * 1024, 5)
+    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s'))
+    logger.addHandler(handler)
+    logger.setLevel(logging.DEBUG)
+
+class IRCError(Exception):
+    pass
+
 class ircevent(object):
     '''Etwas im IRC ist passiert'''
-    __slots__ = ['quelle','ziel','event','inhalt','parent']
+    __slots__ = ['quelle','ziel','event','inhalt','parent','befehl']
     quelle = {}
 
     def __init__(self,zeile,parent):
         self.parent = parent
         self._teile(zeile)
-        print self
 
     def __repr__(self):
         return "\n".join(("Quelle:" + str(self.quelle), "Ziel: " + self.ziel, "Event: " + self.event, " ".join(self.inhalt)))
@@ -46,20 +61,99 @@
             self.quelle['ident'] = quelle[1].split('@')[0]
             self.quelle['host'] = quelle[1].split('@')[1]
         self.event = zeile.pop(0)
+        if self.event.isdigit():
+            self.event = "num_%s" % self.event
         self.ziel = zeile.pop(0)
-        zeile[0] = zeile[0].lstrip(':')
+        if len(zeile) > 0:
+            zeile[0] = zeile[0].lstrip(':')
         self.inhalt = zeile
 
     def Log(self):
         '''schreibt das event ins logfile'''
-        pass
+        if self.ziel == self.parent.currentnickname:
+            logkategorie = self.quelle['nick']
+        else:
+            logkategorie = self.ziel
+        INlogger = logging.getLogger('IN-%s' % logkategorie)
+        INlogger.debug('%s %s %s' % (str(self.quelle),self.event," ".join(self.inhalt)))
 
+
     def Checkforcommand(self):
         '''?berpr?ft die den Inhalt auf einen Befehl und gibt den zur?ck bei Erfolg, ansonsten nichts'''
-        if self.inhalt[0].startswith(self.parent.nick) or self.ziel == self.parent.nick:
-            if self.inhalt[0].startswith(self.parent.nick): self.inhalt.pop(0)
+        if self.inhalt[0].startswith(self.parent.currentnickname) or self.ziel == self.parent.currentnickname:
+            if self.inhalt[0].startswith(self.parent.currentnickname): self.inhalt.pop(0)
             befehl = self.inhalt.pop(0)
             argumente = self.inhalt
-            return {'befehl':befehl,'argumente':argumente}
+            self.befehl = {'befehl':befehl,'argumente':argumente}
+
+class ircverbindung(object):
+    def __init__(self,server,nickname,ident=None,realname=None):
+        global logger
+        self._buffer = ''
+        logger.debug('Verbindung zu %s wird hergestellt' % server)
+        self.Verbinde(server,nickname,ident,realname)
+
+    def Verbinde(self,server,nickname,ident=None,realname=None):
+        self.nicknames = []
+        if type(nickname) == type([]):
+            self.nicknames.extend(nickname)
         else:
-            return False
\ No newline at end of file
+            self.nicknames.append(nickname)
+        self.currentnickname = self.nicknames.pop(0)
+        ident = ident or self.currentnickname
+        realname = realname or self.currentnickname
+        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        try:
+            self._socket.connect(server)
+        except TypeError:
+            self._socket.connect((server,6667))
+        logger.info('Verbindung zu %s wurde hergestellt' % server)
+        self.rawsend('USER %s * * :%s' % (ident, realname))
+        self.rawsend('NICK %s' % self.currentnickname)
+        self._verarbeite()
+
+    def _verarbeite(self):
+        while True:
+            try:
+                self._buffer = self._socket.recv(8192)
+            except socket.error:
+                logger.critical('Verbindung unterbrochen')
+                break
+            if len(self._buffer) == 0:
+                logger.critical('Verbindung unterbrochen')
+                break
+            temp = self._buffer.split('\n')
+            self._buffer = temp.pop()
+            for zeile in temp:
+                zeile = zeile.rstrip()
+                if zeile.split()[0] == 'PING':
+                    self.rawsend('PONG %s' % zeile.split()[1])
+                else:
+                    event = ircevent(zeile,self)
+                    handler = getattr(events,event.event,events.unbekannt)
+                    handler(event)
+
+    def rawsend(self, zeile):
+        self._socket.send('%s\r\n' % zeile)
+
+    def join(self,channel,key=''):
+        logger.debug('Betrete %s' % channel)
+        self.rawsend('JOIN %s %s' % (channel,key))
+
+    def part(self,channel):
+        logger.debug('Verlasse %s' % channel)
+        self.rawsend('PART %s' % channel)
+
+    def quit(self,quitmessage='weq'):
+        logger.info('Beende die Verbindung')
+        self.rawsend('QUIT :%s' % quitmessage)
+
+    def msg(self,ziel,message):
+        logger.debug('Message an %s: %s' % (ziel, message))
+        self.rawsend('PRIVMSG %s :%s' % (ziel, message))
+
+    def notice(self,ziel,message):
+        logger.debug('Notice an %s: %s' % (ziel, message))
+        self.rawsend('NOTICE %s :%s' % (ziel, message))
+
+logstart(1024)
\ No newline at end of file

Modified: branches/recodemitclasses/xwars.py
===================================================================
--- branches/recodemitclasses/xwars.py	2006-03-06 12:15:24 UTC (rev 51)
+++ branches/recodemitclasses/xwars.py	2006-03-11 19:31:51 UTC (rev 52)
@@ -9,7 +9,7 @@
 # #############################################
 # # Ein library f?r verschiedene Funktionen im#
 # # Browsergame X-Wars                        #
-# # ### ### ### ### ### ### ### ### ### ### ### 
+# # ### ### ### ### ### ### ### ### ### ### ###
 
 # was an Modulen gebraucht wird
 from urllib import urlopen
@@ -21,16 +21,16 @@
 from locale import format, setlocale, LC_ALL
 
 class kampfbericht:
-    '''X-Wars Kampfberichte sind ein tolles Objekt. 
+    '''X-Wars Kampfberichte sind ein tolles Objekt.
 
-    Erwartet: URL als String, sollte mit dem in der Konfiguration definierten 
+    Erwartet: URL als String, sollte mit dem in der Konfiguration definierten
     String anfangen, ist sicherheitstechnisch wohl eine ganz gute Idee'''
-    
+
     # Konfiguration
     # Mit was soll die URl anfangen?
     urlstart = 'http://reports.xwars.gamigo.de/'
-    cachedir = '/home/tiax/xwars/parser/cache/'
-    savedir = '/home/tiax/xwars/parser/save/'
+    cachedir = 'C:\\Dokumente und Einstellungen\\tiax\\Desktop\\xwars\\cache\\'
+    savedir = 'C:\\Dokumente und Einstellungen\\tiax\\Desktop\\xwars\\save\\'
 
 
     def __init__(self,url):
@@ -39,9 +39,9 @@
             raise IOError('Cachedir existiert nicht')
         if not path.isdir(self.savedir):
             raise IOError('Savedir existiert nicht')
-        self.startbasis = {} # damit die Flottenfunktionen halbwegs 
+        self.startbasis = {} # damit die Flottenfunktionen halbwegs
         self.zielbasis = {}  # voneinander aufgerufen werden koennen
-        self.url = url    
+        self.url = url
 
     def _get_id(self):
         '''?berpr?ft kampfbericht-urls auf ihre g?ltigkeit'''
@@ -54,9 +54,9 @@
             raise IOError('Ung?ltige URL')
         if not self.id:
             raise IOError('Ung?ltige URL')
-        
+
     def _get_kb(self):
-        '''holt den kampfbericht hervor 
+        '''holt den kampfbericht hervor
         ?berpr?ft zun?chst, ob er vielleicht bereits abgerufen worden ist
         und l?dt dann aus dem cache'''
         if path.isfile(self.cachedir + self.id):
@@ -81,7 +81,7 @@
         self.zielbasis['Allianz'], \
         self.zielbasis['Name'] = zielregexp.search(self.bericht).groups()
         self.zeit = strptime(" ".join(uhrzeitregexp.search(self.bericht).groups()), '%d.%m.%Y %H:%M:%S')
-        
+
     def _get_werte(self):
         '''Holt sich die Flottenwerte, Verluste noch nicht'''
         flottenregexp = compile(r'org: (\d+)/(\d+) surv: (\d+)?/(\d+)?')
@@ -97,11 +97,11 @@
         for item in flotten:
             AttVorher += int((item[0]) or 0) # or 0 ist notwendig
             DefVorher += int((item[1]) or 0) # verlorene Flotten sind bei X-Wars
-            AttNachher += int((item[2]) or 0) # nicht 0 
+            AttNachher += int((item[2]) or 0) # nicht 0
             DefNachher += int((item[3]) or 0) # sondern nix.
         self.zielbasis['Flotte'] = (AttVorher, DefVorher, AttNachher, DefNachher)
         self.zielbasis['MP'] = (AttVorher + DefVorher) / 200.0
-        
+
     def _get_verluste(self):
         '''Holt sich die Verluste. Es ist sinnvoll, erst die Werte zu holen'''
         StartbasisVerluste = (abs(self.startbasis['Flotte'][0] - self.startbasis['Flotte'][2]), abs(self.startbasis['Flotte'][1] - self.startbasis['Flotte'][3]))
@@ -130,7 +130,7 @@
 		        <td xwidth="326px" colspan="2" xbgcolor="#2A2A2A"><font color="#222222">TDM Warreport v1 py</td>
 		  </tr>
                </table>
-		    
+
 		<table border="0" cellspacing="0" cellpadding="0" width="665px">
 		<tr><td bgcolor="#2A2A2A" height="9px"></td></tr>
 		<tr>
@@ -196,7 +196,7 @@
     def _make_namestring(self):
         '''Erstellt einen Dateinamentauglichen Namen f?r de Kampfbericht'''
         self.namestring = '%(Angreiferallianz)s%(Angreifername)s-%(Verteidigerallianz)s-%(Verteidigername)s-%(Zeit)s' % {'Angreiferallianz':self.startbasis['Allianz'],'Angreifername':self.startbasis['Name'],'Verteidigerallianz':self.zielbasis['Allianz'],'Verteidigername':self.zielbasis['Name'],'Zeit':strftime('%Y%m%d-%H%M',self.zeit)}
-        
+
     def _insert_template(self):
         '''f?gt das ausgef?llte Template in den Kampfbericht ein'''
         berichtliste = self.bericht.splitlines()
@@ -230,7 +230,7 @@
         bericht = bericht.replace('Schiffe von','Schiffe')
         bericht = bericht.replace('Verteidigung auf','Verteidigung')
         self.bearbeiteterbericht = bericht.splitlines()
-        
+
     def save(self):
         '''Den Bericht ins Dateisystem speichern'''
         self.dateiname = self.savedir + self.namestring.replace('[','').replace(']','-') + '.html'



From tiax at berlios.de  Sun Mar 12 03:31:11 2006
From: tiax at berlios.de (tiax at BerliOS)
Date: Sun, 12 Mar 2006 03:31:11 +0100
Subject: [Pwnbot-commits] r53 - branches/recodemitclasses
Message-ID: <200603120231.k2C2VBID020566@sheep.berlios.de>

Author: tiax
Date: 2006-03-12 03:31:05 +0100 (Sun, 12 Mar 2006)
New Revision: 53

Modified:
   branches/recodemitclasses/befehle.py
Log:
kleine bugs behoben

Modified: branches/recodemitclasses/befehle.py
===================================================================
--- branches/recodemitclasses/befehle.py	2006-03-11 19:31:51 UTC (rev 52)
+++ branches/recodemitclasses/befehle.py	2006-03-12 02:31:05 UTC (rev 53)
@@ -2,11 +2,11 @@
 # -*- coding: utf-8 -*-
 import xwars
 import logging
-
+?
 logger = logging.getLogger('plugins')
 
 def _checkfortiax(event):
-    return event.quelle['ident'] == 'tiax' and event.quelle['host'] == 'victory-is-life.de'
+    return event.quelle['ident'] == 'tiax' and event.quelle['host'] == 'tiax.support.xwars'
 def quit(event):
     if _checkfortiax(event):
         event.parent.quit('Shutdown: %s' % ' '.join(event.befehl['argumente']))
@@ -41,9 +41,9 @@
             try:
                 kampfbericht.analyze()
             except (IOError), meldung:
-                self.notice(event.quelle['nick'],meldung)
+                event.parent.notice(event.quelle['nick'],meldung)
             except AttributeError:
-                self.notice(event.quelle['nick'],'Ung?ltige URL')
+                event.parent.notice(event.quelle['nick'],'Ung?ltige URL')
             else:
                 kampfbericht.manipulate()
                 kampfbericht.save()



From tiax at berlios.de  Sun Mar 12 03:33:34 2006
From: tiax at berlios.de (tiax at BerliOS)
Date: Sun, 12 Mar 2006 03:33:34 +0100
Subject: [Pwnbot-commits] r54 - branches/recodemitclasses
Message-ID: <200603120233.k2C2XYcI021652@sheep.berlios.de>

Author: tiax
Date: 2006-03-12 03:33:30 +0100 (Sun, 12 Mar 2006)
New Revision: 54

Modified:
   branches/recodemitclasses/events.py
Log:
wer sys verwendet, sollte sys importieren

Modified: branches/recodemitclasses/events.py
===================================================================
--- branches/recodemitclasses/events.py	2006-03-12 02:31:05 UTC (rev 53)
+++ branches/recodemitclasses/events.py	2006-03-12 02:33:30 UTC (rev 54)
@@ -2,6 +2,7 @@
 # -*- coding: utf-8 -*-
 import logging
 import befehle
+import sys
 logger = logging.getLogger()
 
 # Events f?r den pwnbot



From tiax at berlios.de  Sun Mar 12 03:35:21 2006
From: tiax at berlios.de (tiax at BerliOS)
Date: Sun, 12 Mar 2006 03:35:21 +0100
Subject: [Pwnbot-commits] r55 - branches/recodemitclasses
Message-ID: <200603120235.k2C2ZLta022562@sheep.berlios.de>

Author: tiax
Date: 2006-03-12 03:35:18 +0100 (Sun, 12 Mar 2006)
New Revision: 55

Modified:
   branches/recodemitclasses/ircbot.py
Log:
kleine bugfixes, docstrings und startfunktion, einschlie?\195?\159lich d?\195?\164mon

Modified: branches/recodemitclasses/ircbot.py
===================================================================
--- branches/recodemitclasses/ircbot.py	2006-03-12 02:33:30 UTC (rev 54)
+++ branches/recodemitclasses/ircbot.py	2006-03-12 02:35:18 UTC (rev 55)
@@ -18,7 +18,6 @@
 import sys
 import time
 import os
-import xwars
 import logging
 import events
 from logging.handlers import RotatingFileHandler
@@ -26,6 +25,7 @@
 logger = None
 
 def logstart(size):
+    '''erstellt das Logding'''
     global logger
     logger = logging.getLogger()
     handler = RotatingFileHandler('ircbot.log','a',size * 1024, 5)
@@ -87,13 +87,18 @@
             self.befehl = {'befehl':befehl,'argumente':argumente}
 
 class ircverbindung(object):
+    '''eine Verbindung zum IRC
+    
+    erh?lt (server,port) oder nur server
+    nickname'''
     def __init__(self,server,nickname,ident=None,realname=None):
         global logger
         self._buffer = ''
-        logger.debug('Verbindung zu %s wird hergestellt' % server)
+        logger.debug('Verbindung zu %s:%s wird hergestellt' % server)
         self.Verbinde(server,nickname,ident,realname)
 
     def Verbinde(self,server,nickname,ident=None,realname=None):
+        '''stellt die Verbindung her'''
         self.nicknames = []
         if type(nickname) == type([]):
             self.nicknames.extend(nickname)
@@ -107,12 +112,13 @@
             self._socket.connect(server)
         except TypeError:
             self._socket.connect((server,6667))
-        logger.info('Verbindung zu %s wurde hergestellt' % server)
+        logger.info('Verbindung zu %s:%s wurde hergestellt' % server)
         self.rawsend('USER %s * * :%s' % (ident, realname))
         self.rawsend('NICK %s' % self.currentnickname)
         self._verarbeite()
 
     def _verarbeite(self):
+        '''Loop, liest aus dem Puffer und verarbeitet das Ergebnis'''
         while True:
             try:
                 self._buffer = self._socket.recv(8192)
@@ -134,26 +140,52 @@
                     handler(event)
 
     def rawsend(self, zeile):
+        '''schickt etwas an den Server'''
         self._socket.send('%s\r\n' % zeile)
 
     def join(self,channel,key=''):
+        '''betritt einen Channel'''
         logger.debug('Betrete %s' % channel)
         self.rawsend('JOIN %s %s' % (channel,key))
 
     def part(self,channel):
+        '''Verl?sst einen Channel'''
         logger.debug('Verlasse %s' % channel)
         self.rawsend('PART %s' % channel)
 
     def quit(self,quitmessage='weq'):
+        '''Beendet die Verbindung'''
         logger.info('Beende die Verbindung')
         self.rawsend('QUIT :%s' % quitmessage)
 
     def msg(self,ziel,message):
+        '''Schickt eine Nachricht'''
         logger.debug('Message an %s: %s' % (ziel, message))
         self.rawsend('PRIVMSG %s :%s' % (ziel, message))
 
     def notice(self,ziel,message):
+        '''Schickt eine Notice'''
         logger.debug('Notice an %s: %s' % (ziel, message))
         self.rawsend('NOTICE %s :%s' % (ziel, message))
 
-logstart(1024)
\ No newline at end of file
+if __name__ == '__main__':
+    if "--daemon" in sys.argv:
+        # wir machen einen daemon
+        if not (os.fork()):
+            # eigene session erstellen
+            os.setsid()
+            sys.stdin.close()
+            sys.stdout = open('/home/tiax/daemonlog','w')
+            sys.stderr = sys.stdout
+            if not (os.fork()):
+                ppid = os.getppid()
+                while (ppid != 1):
+                    time.sleep(0.5)
+                    ppid = os.getppid()
+            else:
+                os._exit(0)
+        else:
+            os.wait()
+            sys.exit()
+    logstart(1024)
+    GameSurge = ircverbindung(('irc.xwars.de',6667),['pwn','own','pwn0r'])



